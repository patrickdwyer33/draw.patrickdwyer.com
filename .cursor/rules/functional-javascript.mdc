---
description: 
globs: 
alwaysApply: true
---
# Rule Name: Functional JavaScript Patterns
Description: Guidelines for writing JavaScript in a functional, declarative style inspired by LISP and Haskell patterns.

## Core Principles
- Write code as expressions rather than statements
- Favor immutability over mutation
- Use pure functions whenever possible
- Implement dependency injection for better modularity
- Compose functions to build complexity
- Build modules and import them into @src/scripts/main.js

## Key Guidelines

### Function Composition
- Use function composition over imperative sequences
- Chain transformations using methods like `.map`, `.filter`, `.reduce`
- Leverage pipe/compose utilities for complex transformations

✅ Good:
```javascript
const processUsers = pipe(
  filter(user => user.active),
  map(user => user.name),
  sort((a, b) => a.localeCompare(b))
);
```

❌ Bad:
```javascript
function processUsers(users) {
  const activeUsers = [];
  for (let user of users) {
    if (user.active) {
      activeUsers.push(user.name);
    }
  }
  return activeUsers.sort();
}
```

### Pure Functions
- Functions should be deterministic
- Avoid side effects within functions
- Use dependency injection for external dependencies

✅ Good:
```javascript
const calculateTotal = (items, taxRate) => 
  items.reduce((sum, item) => 
    sum + item.price, 0) * (1 + taxRate);

// Dependency injection
const createUserService = (database) => ({
  getUser: (id) => database.query('users', id),
});
```

❌ Bad:
```javascript
const calculateTotal = (items) => {
  let total = 0;
  // Bad: Global state dependency
  const taxRate = globalTaxRate;
  items.forEach(item => {
    total += item.price;
  });
  return total * (1 + taxRate);
};
```

### Data Transformation
- Treat data as immutable
- Use spreading and mapping instead of mutation
- Return new objects/arrays instead of modifying existing ones

✅ Good:
```javascript
const addTodo = (todos, newTodo) => [...todos, newTodo];
const updateTodo = (todos, id, updates) =>
  todos.map(todo =>
    todo.id === id
      ? { ...todo, ...updates }
      : todo
  );
```

❌ Bad:
```javascript
const addTodo = (todos, newTodo) => {
  todos.push(newTodo); // Mutates array
  return todos;
};
```

### Error Handling
- Use Either/Maybe patterns instead of try/catch
- Return Result objects instead of throwing errors
- Handle nulls with Optional/Maybe types

✅ Good:
```javascript
const divide = (a, b) =>
  b === 0
    ? Either.left('Division by zero')
    : Either.right(a / b);

const getUser = (id) =>
  Optional.of(users.find(user => user.id === id));
```

❌ Bad:
```javascript
const divide = (a, b) => {
  if (b === 0) throw new Error('Division by zero');
  return a / b;
};
```

## File Organization
@src/utils/fp.js - Functional programming utilities
@src/utils/either.js - Either monad implementation
@src/utils/optional.js - Optional/Maybe type implementation

## Additional Resources
- [Mostly Adequate Guide to Functional Programming](mdc:https:/github.com/MostlyAdequate/mostly-adequate-guide)
- [Fantasy Land Specification](mdc:https:/github.com/fantasyland/fantasy-land)
- [Ramda Documentation](mdc:https:/ramdajs.com/docs)

## Implementation Notes
- Implement everything in Javascript
- Document function signatures clearly using JSDoc comments
- Consider adding ESLint rules to enforce functional patterns